Stores

One store
  Only create new stores - never change it
  store = createStore(reducer, {})


Reducers change the store
  const reducer = function (state, action) {
    ACTIONS --> triggered by disptch, trigger state change
    action.payload (or whatever is in dispatch object)
  }

  Reducers need to return someting
  break up reducers into multiple

  Break up reducers - combineReducers


subscribe to a store
  -- triggered on store change
  store.subscribe(() => { })


dispatch events to the store
  store.dispatch({type: 'SOME_TYPE', payload: {obj}})
    -each dispatch needs to have a type, typically ahve a payload with changes in that payload, although could be different


Middleware

ex:
const logger = (store) => (next) => (action) => {
  console.log(action);
  next(action);
}

const middleware = applyMiddleware(logger)








try {

} catch(err) {

}

reducer
switch(action.type) {
  case "SOME ACTION": {
    break;
  }
  case "SOME_OTHER_ACTION": {
    break;
  }
  etc...
}

thunk
or redux-promises
